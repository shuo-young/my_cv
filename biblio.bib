@inproceedings{yang2023definition,
  author    = {Yang, Shuo and Chen, Jiachi and Zheng, Zibin},
  title     = {Definition and Detection of Defects in NFT Smart Contracts},
  year      = {2023},
  isbn      = {9798400702211},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3597926.3598063},
  doi       = {10.1145/3597926.3598063},
  abstract  = {Recently, the birth of non-fungible tokens (NFTs) has attracted great attention. NFTs are capable of representing users’ ownership on the blockchain and have experienced tremendous market sales due to their popularity. Unfortunately, the high value of NFTs also makes them a target for attackers. The defects in NFT smart contracts could be exploited by attackers to harm the security and reliability of the NFT ecosystem. Despite the significance of this issue, there is a lack of systematic work that focuses on analyzing NFT smart contracts, which may raise worries about the security of users’ NFTs. To address this gap, in this paper, we introduce 5 defects in NFT smart contracts. Each defect is defined and illustrated with a code example highlighting its features and consequences, paired with possible solutions to fix it. Furthermore, we propose a tool named NFTGuard to detect our defined defects based on a symbolic execution framework. Specifically, NFTGuard extracts the information of the state variables from the contract abstract syntax tree (AST), which is critical for identifying variable-loading and storing operations during symbolic execution. Furthermore, NFTGuard recovers source-code-level features from the bytecode to effectively locate defects and report them based on predefined detection patterns. We run NFTGuard on 16,527 real-world smart contracts and perform an evaluation based on the manually labeled results. We find that 1,331 contracts contain at least one of the 5 defects, and the overall precision achieved by our tool is 92.6\%.},
  booktitle = {Proceedings of the 32nd ACM SIGSOFT International Symposium on Software Testing and Analysis},
  pages     = {373–384},
  numpages  = {12},
  keywords  = {smart contracts, NFTs, defects definition and detection, symbolic execution},
  location  = {Seattle, WA, USA},
  series    = {ISSTA 2023}
}

@misc{lin2023understanding,
  title         = {Towards Understanding Crypto Money Laundering in Web3 Through the Lenses of Ethereum Heists},
  author        = {Dan Lin and Jiajing Wu and Qishuang Fu and Yunmei Yu and Kaixin Lin and Zibin Zheng and Shuo Yang},
  year          = {2023},
  eprint        = {2305.14748},
  archiveprefix = {arXiv},
  primaryclass  = {cs.CR}
}

@inproceedings{yang2022wali,
  author    = {Yang, Shuo
               and Li, Huizhong
               and Zheng, Zibin},
  editor    = {Svetinovic, Davor
               and Zhang, Yin
               and Luo, Xiapu
               and Huang, Xiaoyan
               and Chen, Xingping},
  title     = {WaLi: Control-Flow-Based Analysis of Wasm Smart Contracts},
  booktitle = {Blockchain and Trustworthy Systems},
  year      = {2022},
  publisher = {Springer Nature Singapore},
  address   = {Singapore},
  pages     = {322--335},
  abstract  = {With the proliferation of various types of blockchain applications, smart contracts are getting more and more essential in developing decentralized applications due to their powerful expressing capabilities. However, security vulnerabilities of smart contracts keep arising in recent years, which has attracted a lot of attention. Most of the related research mainly focuses on smart contracts deployed on Ethereum. But in the meantime, more and more types of smart contracts adopt Wasm as their bytecode format due to its smaller size and higher operating efficiency in blockchain. To avoid the recurrence of exploited vulnerabilities in Wasm smart contracts, we develop WaLi, a control-flow-based analyzer for security vulnerabilities. In particular, we first construct a control flow graph based on the Wasm bytecode and define a critical path identification method to locate possible paths that may contain vulnerabilities. Then we adopt a Wasm virtual machine to simulate a runtime environment when tracing the critical paths and report the result based on our vulnerability detection patterns. We choose Liquid smart contracts on FISCO-BCOS to illustrate our approach and the experimental results show that WaLi performs well in detecting the access control vulnerabilities.},
  isbn      = {978-981-19-8043-5}
}

